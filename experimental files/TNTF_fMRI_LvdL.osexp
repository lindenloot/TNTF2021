---
API: 2.1
OpenSesame: 3.3.9a4
Platform: posix
---
set width 1024
set uniform_coordinates yes
set title TNT_IMDF_fMRI
set subject_parity even
set subject_nr 0
set start experiment
set sound_sample_size -16
set sound_freq 48000
set sound_channels 2
set sound_buf_size 1024
set sampler_backend psycho
set round_decimals 2
set mouse_backend psycho
set keyboard_backend psycho
set height 768
set fullscreen no
set form_clicks no
set foreground black
set font_underline no
set font_size 20
set font_italic no
set font_family mono
set font_bold no
set experiment_path "/home/lotje/Documents/Research, teaching and programming/OpenSesame/Scripts/Others/Claudius Schroeder/experimental files"
set disable_garbage_collection yes
set description "A template containing a practice and an experimental phase"
set coordinates uniform
set compensation 0
set color_backend psycho
set clock_backend psycho
set canvas_backend psycho
set bidi yes
set background grey

define notepad CHANGELOG
	__note__
	# 2021-02-25:
	
	- **Replaced keyboard_response item by an inline_script that waits
	    for 5 t presses before launching the rest of the experiment
	- **Added newly scaled images (for dimensions see CHANGELOG in pretest)
	
	# 2021-03-18
	- Added scaling factors, so that their values can be changed easily in scaling_factors
	- Added some dummy trial lists to TNT_fMRI_blockloop_B and TNT_fMRI_blockloop_C (for testing purposes)
	
	# 2021-04-04:
	
	## t-presses:
	
	- OpenSesame waits for five t presses:
	    - At the beginning of the experiment
	    - Halfway the TNT phase (after the break)
	    - Before starting the IMDF practice
	    - Before starting the IMDF experimental part
	    - Halfway the IMDF
	    
	
	## TNT:
	
	- Trial list for the TNT is read in from csv file. A separate csv file is generated for each participant. For constraints, see documentation in the .py files
	- Block A, B, C and D didn't serve any purpose anymore so we now have one big loop of 128 trials
	- With a break in between after 64 trials
	- After the break, OpenSesame waits for 5 t-presses and shows the instruction screens (end and get ready)
	
	
	- Replaced sketchpad showing the cue with feedback item, because
	    otherwise OpenSesame is going to complain about the variables
	    that are used in the sketchpad (color and file) on the NULL trials
	
	- Implemented the NULL trials where a fixation dot (instead of the cue)
	is shown for 6000 ms (3000 ms replacing the cue, 3000 ms replacing the 
	intrusion rating)
	
	- Added pair refreshers (order is pseudorandom, only the first and last trials are not fillers). 
	To be sure, the refresher loop is preceded with the t-presses structure
	
	## IMDF:
	
	- Trial lists are read in from csv files
	- With a break halfway (i.e., after 79 trials, corresponding to 60 exp trials,
	15 NULL trials and 4 fillers)
	- Replaced sketchpads with feedback items to be able to deal with NULL
	trials (see above)
	
	- Implemented NULL trials with a duration of 8000 ms (replacing 2000 ms scene, 
	4000 ms scene+object and 2000 ms instruction)
	__end__
	set description "A simple notepad to document your experiment. This plug-in does nothing."

define feedback IMDF_fMRI_NULL
	set reset_variables yes
	set duration 8000
	set description "Displays stimuli"
	draw line color=black penwidth="[fixationwidth]" show_if=always x1="[start_x_fixationline]" x2="[end_x_fixationline]" y1=0 y2=0 z_index=0
	draw line color=black penwidth="[fixationwidth]" show_if=always x1=0 x2=0 y1="[start_y_fixationline]" y2="[end_y_fixationline]" z_index=0
	draw textline center=1 color=black font_bold=no font_family=mono font_italic=no font_size=20 html=yes show_if=always text="[condition]" x=0 y=-224 z_index=0

define sketchpad IMDF_fMRI_blankISI
	set duration "[IMDFblankISI_jitter]"
	set description "Displays stimuli"

define loop IMDF_fMRI_blockloop
	set source_file "IMDF_scanning_PP[subject_nr].csv"
	set source file
	set repeat 1
	set order sequential
	set description "Repeatedly runs another item"
	set cycles 1
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 empty_column ""
	run IMDF_fMRI_trialsequence

define loop IMDF_fMRI_blockloop_practice
	set source_file ""
	set source table
	set repeat 1
	set order random
	set description "Repeatedly runs another item"
	set cycles 2
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 Emotion neg
	setcycle 0 Scene "Animals_007_h_disgustfear.jpg"
	setcycle 0 Instruction VVV
	setcycle 0 Instruction_color red
	setcycle 0 Object "teabag.jpg"
	setcycle 1 Emotion neu
	setcycle 1 Scene "neutral_064.jpg"
	setcycle 1 Instruction MMM
	setcycle 1 Instruction_color green
	setcycle 1 Object "thimble.jpg"
	run IMDF_fMRI_trialsequence_practice

define sketchpad IMDF_fMRI_fixation
	set duration 1000
	set description "Displays stimuli"
	draw line color=black penwidth="[fixationwidth]" show_if=always x1="[start_x_fixationline]" x2="[end_x_fixationline]" y1=0 y2=0 z_index=0
	draw line color=black penwidth="[fixationwidth]" show_if=always x1=0 x2=0 y1="[start_y_fixationline]" y2="[end_y_fixationline]" z_index=0

define feedback IMDF_fMRI_instruct
	set reset_variables yes
	set duration 2000
	set description "Displays stimuli"
	draw textline center=1 color="[color]" font_bold=no font_family=mono font_italic=no font_size=40 html=yes show_if=always text="[remember_condition]" x=0 y=0 z_index=0

define inline_script IMDF_fMRI_jitterblankISIscript
	set description "Executes Python code"
	set _run ""
	___prepare__
	import random # importing library 
	IMDFjitter_durations_list = [5000, 5400, 5800, 6000, 6200, 6600, 7000]
	var.IMDFblankISI_jitter = random.choice(IMDFjitter_durations_list)
	print(var.IMDFblankISI_jitter)
	__end__

define feedback IMDF_fMRI_scene
	set reset_variables yes
	set duration 2000
	set description "Displays stimuli"
	draw image center=1 file="[Scene]" scale="[scale_scene_IMDF]" show_if=always x=0 y=0 z_index=0

define feedback IMDF_fMRI_sceneobject
	set reset_variables yes
	set duration 4000
	set description "Displays stimuli"
	draw image center=1 file="[Scene]" scale="[scale_scene_IMDF]" show_if=always x=0 y=0 z_index=0
	draw image center=1 file="[Object]" scale="[scale_object_IMDF]" show_if=always x=0 y=0 z_index=0

define sequence IMDF_fMRI_trialsequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run IMDF_fMRI_jitterblankISIscript always
	run new_inline_script always
	run IMDF_fMRI_fixation always
	run IMDF_fMRI_scene "[condition] != \"NULL\""
	run IMDF_fMRI_sceneobject "[condition] != \"NULL\""
	run IMDF_fMRI_instruct "[condition] != \"NULL\""
	run IMDF_fMRI_NULL "[condition] == \"NULL\""
	run IMDF_fMRI_blankISI always
	run logger always
	run blank_before_t_presses "[trial_count] == 79"
	run wait_for_five_t_presses "[trial_count] == 79"
	run end "[trial_count] == 79"
	run get_ready "[trial_count] == 79"

define sequence IMDF_fMRI_trialsequence_practice
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run IMDF_fMRI_jitterblankISIscript always
	run IMDF_fMRI_fixation always
	run IMDF_fMRI_scene always
	run IMDF_fMRI_sceneobject always
	run IMDF_fMRI_blankISI always
	run logger always

define notepad Questions_for_CVS
	__note__
	- Doesn't it make more sense to show the In 10 sekunden geth's los' screen BEFORE waiting for the t-presses, such that the 10 seconds is actually met? Now the screen waits for another keypress...
	
	- In the TNT intrusion rating scale, participants are asked to press R, G, or B. But the keyboard_response item allows G, B and Y. Which buttons are the correct ones?
	
	- Check for duplicates in the names of the TNT and the IMDF scenes
	
	- Which instruction belongs to which condition? VVV = TBF, MMM = TBR?
	
	- Scaling of IMDF scense and objects?
	
	
	- For the final version of the experiment -> move images to experimental folder
	    instead of file pool (which is getting so full that it might influence loading time)
	    
	- Why is there no forgetting instruction in the practice phase of the IMDF?
	
	- Stimuli for the practice IMDF should be added
	
	- Refresher loop does not start and end with two fillers. Is that okay (for now?)
	
	- The jitters should still be added. Alternatively, we could (for tomorrow) leave the jitter as is, or use the advanced_delay item
	__end__
	set description "A simple notepad to document your experiment. This plug-in does nothing."

define loop TNTF_fMRI
	set source_file ""
	set source table
	set repeat 1
	set order random
	set description "Repeatedly runs another item"
	set cycles 1
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 empty_column ""
	run TNTF_fMRI_blocksequence

define sequence TNTF_fMRI_blocksequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run TNT_fMRI_blockloop always
	run blank_before_t_presses always
	run wait_for_five_t_presses always
	run end always
	run get_ready always

define inline_script TNTF_fMRI_jitteredfixationscript
	set description "Executes Python code"
	set _run ""
	___prepare__
	import random # importing library 
	TNTjitter_durations_list = [1400, 1800, 2000, 2200, 2600]
	var.TNTfixation_jitter = random.choice(TNTjitter_durations_list)
	print(var.TNTfixation_jitter)
	    # 2000 ms may be removed 
	    # May contain an exponetial distrobution
	    # Fixed order or completley random?
	__end__

define feedback TNT_fMRI_NULL
	set reset_variables yes
	set duration 3000
	set description "Displays stimuli"
	draw line color=black penwidth="[fixationwidth]" show_if=always x1="[start_x_fixationline]" x2="[end_x_fixationline]" y1=0 y2=0 z_index=0
	draw line color=black penwidth="[fixationwidth]" show_if=always x1=0 x2=0 y1="[start_y_fixationline]" y2="[end_y_fixationline]" z_index=0

define loop TNT_fMRI_blockloop
	set source_file "TNT_scanning_PP[subject_nr].csv"
	set source file
	set repeat 1
	set order sequential
	set description "Repeatedly runs another item"
	set cycles 1
	set continuous yes
	set break_if_on_first yes
	set break_if never
	setcycle 0 empty_column ""
	run TNT_fMRI_trialsequence

define feedback TNT_fMRI_cue
	set reset_variables yes
	set duration 3000
	set description "Displays stimuli"
	draw rect color="[color]" fill=1 h=448 penwidth=1 show_if=always w=448 x=-224 y=-224 z_index=0
	draw image center=1 file="[Object]" scale="[scale_object_cue]" show_if=always x=0 y=0 z_index=0

define sketchpad TNT_fMRI_intrusionrating
	set duration 0
	set description "Displays stimuli"
	draw textline center=1 color=black font_bold=no font_family=hindi font_italic=no font_size=20 html=yes show_if=always text="Wie oft mussten Sie an die Reaktionsszene denken?<br />" x=0 y=-32 z_index=0
	draw line color=black penwidth=4 show_if=always x1=-288 x2=288 y1=0 y2=0 z_index=0
	draw line color=black penwidth=4 show_if=always x1=-288 x2=-288 y1=0 y2=32 z_index=0
	draw line color=black penwidth=4 show_if=always x1=288 x2=288 y1=0 y2=32 z_index=0
	draw line color=black penwidth=4 show_if=always x1=0 x2=0 y1=0 y2=32 z_index=0
	draw textline center=1 color=black font_bold=no font_family=hindi font_italic=no font_size=20 html=yes show_if=always text="Nie: R" x=-288 y=64 z_index=0
	draw textline center=1 color=black font_bold=no font_family=hindi font_italic=no font_size=20 html=yes show_if=always text="Manchmal: G" x=0 y=64 z_index=0
	draw textline center=1 color=black font_bold=no font_family=hindi font_italic=no font_size=20 html=yes show_if=always text="Immer: B" x=288 y=64 z_index=0

define keyboard_response TNT_fMRI_intrusionrating_response
	set timeout "[timeout_keypress]"
	set flush yes
	set event_type keypress
	set duration keypress
	set description "Collects keyboard responses"
	set allowed_responses "g;b;y"

define sketchpad TNT_fMRI_jitteredfixation
	set duration "[TNTfixation_jitter]"
	set description "Displays stimuli"
	draw line color=black penwidth="[fixationwidth]" show_if=always x1="[start_x_fixationline]" x2="[end_x_fixationline]" y1=0 y2=0 z_index=0
	draw line color=black penwidth="[fixationwidth]" show_if=always x1=0 x2=0 y1="[start_y_fixationline]" y2="[end_y_fixationline]" z_index=0

define sequence TNT_fMRI_trialsequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run TNTF_fMRI_jitteredfixationscript always
	run TNT_fMRI_jitteredfixation always
	run TNT_fMRI_cue "[condition] != \"NULL\""
	run TNT_fMRI_NULL "[condition] == \"NULL\""
	run TNT_fMRI_intrusionrating "[condition] != \"NULL\""
	run TNT_fMRI_intrusionrating_response "[condition] != \"NULL\""
	run calculate_time_remaining always
	run add_timeremaining "[timeremaining] >= 0"
	run logger always
	run blank_before_t_presses "[trial_count] == 64"
	run wait_for_five_t_presses "[trial_count] == 64"
	run end "[trial_count] == 64"
	run get_ready "[trial_count] == 64"

define feedback add_timeremaining
	set reset_variables yes
	set duration "[timeremaining]"
	set description "Displays stimuli"
	draw line color=black penwidth="[fixationwidth]" show_if=always x1="[start_x_fixationline]" x2="[end_x_fixationline]" y1=0 y2=0 z_index=0
	draw line color=black penwidth="[fixationwidth]" show_if=always x1=0 x2=0 y1="[start_y_fixationline]" y2="[end_y_fixationline]" z_index=0

define sketchpad blank_before_t_presses
	set duration 0
	set description "Displays stimuli"

define inline_script calculate_time_remaining
	set description "Executes Python code"
	___run__
	# On NULL trials, the time-remaining fixcross should be shown for 
	# the full 3000 ms.
	# Which is achieved by setting the RT to 0
	if var.condition == "NULL":
	    var.response_time = 0
	
	var.timeremaining = var.timeout_keypress - var.response_time
	print("time remaining = ", var.timeremaining)
	__end__
	set _prepare ""

define inline_script define_constants
	set description "Executes Python code"
	set _run ""
	set _prepare "var.timeout_keypress = 3000"

define sketchpad end
	set duration keypress
	set description "Displays stimuli"
	draw textline center=1 color=black font_bold=no font_family=mono font_italic=no font_size=30 html=yes show_if=always text="Bitte warten Sie auf weitere Anweisungen..." x=18 y=-4 z_index=0

define sequence experiment
	set flush_keyboard yes
	set description "The main sequence of the experiment"
	run todo_new always
	run Questions_for_CVS always
	run CHANGELOG always
	run wait_for_five_t_presses_initial always
	run welcome always
	run get_ready always
	run fixation always
	run define_constants always
	run scaling_factors always
	run refresher_block_loop always
	run welcome always
	run wait_for_five_t_presses always
	run get_ready always
	run TNTF_fMRI always
	run IMDF_fMRI_blockloop_practice always
	run wait_for_five_t_presses always
	run end always
	run get_ready always
	run IMDF_fMRI_blockloop always
	run wait_for_five_t_presses always
	run end always
	run get_ready always

define inline_script fixation
	set description "Executes Python code"
	set _run ""
	___prepare__
	var.fixationdimension = 60
	var.fixationwidth = 4
	
	var.start_x_fixationline = -(var.fixationdimension/2)
	var.end_x_fixationline = (var.fixationdimension/2)
	
	var.start_y_fixationline = -(var.fixationdimension/2)
	var.end_y_fixationline = (var.fixationdimension/2)
	__end__

define sketchpad get_ready
	set duration keypress
	set description "Displays stimuli"
	draw textline center=1 color=black font_bold=no font_family=mono font_italic=no font_size=30 html=yes show_if=always text="In 10 sekunden geht es los!" x=-11 y=-6 z_index=0

define logger logger
	set description "Logs experimental data"
	set auto_log yes

define inline_script new_inline_script
	set description "Executes Python code"
	set _run ""
	___prepare__
	print("condition = ", var.condition)
	__end__

define logger new_logger
	set description "Logs experimental data"
	set auto_log yes

define sketchpad new_sketchpad
	set duration keypress
	set description "Displays stimuli"

define sketchpad pair
	set duration 2000
	set description "Displays stimuli"
	draw image center=1 file="[Object]" scale="[scale_object_refesher]" show_if=always x=0 y=-256 z_index=0
	draw image center=1 file="[Scene]" scale="[scale_scene_refresher]" show_if=always x=0 y=192 z_index=0

define sketchpad ready
	set duration keypress
	set description "Präsentiert Stimuli"
	draw textline center=1 color=black font_bold=no font_family=arabic font_italic=no font_size=20 html=yes show_if=always text="" x=0 y=-224 z_index=0
	draw textline center=1 color=black font_bold=no font_family=mono font_italic=no font_size=30 html=yes show_if=always text="Sind Sie bereit anzufangen?" x=0 y=-18 z_index=0
	draw textline center=1 color=black font_bold=no font_family=mono font_italic=no font_size=20 html=yes show_if=always text="(Bitte melden Sie sich beim Versuchsleiter, <br />wenn Sie noch weitere Fragen haben)" x=0 y=71 z_index=0

define loop refresher_block_loop
	set source_file "refreshers.csv"
	set source file
	set repeat 1
	set order random
	set description "Repeatedly runs another item"
	set cycles 1
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 Emotion neg
	setcycle 0 Object "scale01a.jpg"
	setcycle 0 Scene "Animals_087_h.jpg"
	setcycle 0 Trial_ID filler
	setcycle 0 distractor_scene_1 "Animals_047_hdisgust.jpg"
	setcycle 0 distractor_scene_2 "Animals_020_h_fear.jpg"
	constrain Emotion maxrep=3
	constrain Trial_ID mindist=2
	run refresher_trial_sequence

define loop refresher_sequence
	set source_file ""
	set source table
	set repeat 1
	set order random
	set description "Repeatedly runs another item"
	set cycles 1
	set continuous no
	set break_if_on_first yes
	set break_if never
	setcycle 0 empty_column ""
	run ""

define sequence refresher_trial_sequence
	set flush_keyboard yes
	set description "Runs a number of items in sequence"
	run pair always
	run new_logger always

define inline_script scaling_factors
	set description "Executes Python code"
	set _run ""
	___prepare__
	var.scale_object_cue = 0.2
	var.scale_object_IMDF = 0.5
	var.scale_scene_IMDF = 1
	var.scale_object_refesher = 0.2
	var.scale_scene_refresher = 0.4
	__end__

define notepad todo_new
	__note__
	Must add 'wait for 5 Ts' at beginning of each runs
	
	Must add 10 s fixcross at end of each run 
	
	Must add pair refreshers before functional runs and before it waits for the first 5 Ts
	
	choose DF images and order based on GA /CVS
	
	edit instruct sketchpads /CVS
	
	**implement button press /Lotje
	
	**how to program for the indiv runs? /CVS/Lotje
	
	**is the 't' pulse synonymous with the TR? /CVS
	**is the 't' sent after every 2 s at a fixed rate? or what is the interval/ (TR?) /CVS
	*need to know above to collect all 't's' /CVS
	
	TODO 23.02.2021
	
	**how to collect the 5th 't' i.e. start experiment onlz after 5th 't' /Lotje
	__end__
	set description "A simple notepad to document your experiment. This plug-in does nothing."

define inline_script wait_for_five_t_presses
	set description "Executes Python code"
	___run__
	# Init keyboard object
	my_keyboard = Keyboard()
	
	print("Waiting for t-presses...")
	
	# First, the number of times t is pressed is 0
	t_count = 0
	
	while True:
	    
	    # Collect key press
	    key, time = my_keyboard.get_key(keylist=["t"])
	    print(key)
	    
	    # If z is pressed, increment counter by 1
	    if key == "t":
	        t_count +=1
	    
	    # If max number is reached, break from the loop
	    # and launch the experiment
	    if t_count >= 5:
	        break
	__end__
	set _prepare ""

define inline_script wait_for_five_t_presses_initial
	set description "Executes Python code"
	set _run ""
	___prepare__
	# Init keyboard object
	my_keyboard = Keyboard()
	
	print("Waiting for five t-presses...")
	
	# First, the number of times t is pressed is 0
	t_count = 0
	
	while True:
	    
	    # Collect key press
	    key, time = my_keyboard.get_key(keylist=["t"])
	    print(key)
	    
	    # If z is pressed, increment counter by 1
	    if key == "t":
	        t_count +=1
	    
	    # If max number is reached, break from the loop
	    # and launch the experiment
	    if t_count >= 5:
	        break
	__end__

define sketchpad welcome
	set duration keypress
	set description "Displays stimuli"
	draw textline center=1 color=black font_bold=no font_family=hindi font_italic=no font_size=30 html=yes show_if=always text="Herzlich willkommen in MRT Phase des Experiments!" x=0 y=0 z_index=0
	draw textline center=1 color=black font_bold=no font_family=hindi font_italic=no font_size=20 html=yes show_if=always text="Bitte warten Sie auf weitere Anweisungen..." x=0 y=64 z_index=0

